package collections

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestGrid1(t *testing.T) {
	grid := NewGrid([][]int{
		{1, -3, 0, -2, -5},
		{7, 9, 2, -3, 3},
		{-2, 0, 8, -4, 6},
	})
	assert.Equal(t, 5, grid.Width())
	assert.Equal(t, 3, grid.Height())
	assert.Equal(t, 0, grid.GetByPos(1, 2))
	assert.Equal(t, 2, grid.GetByPos(2, 1))
	assert.Equal(t, -5, grid.GetByPos(4, 0))
	assert.Equal(t, -3, grid.GetByPos(3, 1))
	assert.Equal(t, 0, grid.GetByOrder(2))
	assert.Equal(t, 7, grid.GetByOrder(5))
	assert.Equal(t, -3, grid.GetByOrder(8))
	assert.Equal(t, 0, grid.GetByOrder(11))
	assert.Equal(t, 6, grid.GetByOrder(14))
}

func TestGrid2(t *testing.T) {
	grid := NewGrid([][]int{
		{-50, -20, -10, -1},
		{0, 1, 2, 3},
		{5, 7, 9, 11},
		{12, 14, 16, 18},
		{50, 60, 70, 100},
	})
	assert.Equal(t, 7, grid.BinarySearch(3))
	assert.Equal(t, 0, grid.BinarySearch(-50))
	assert.Equal(t, 14, grid.BinarySearch(16))
	assert.Equal(t, 19, grid.BinarySearch(100))
}

func TestGrid3(t *testing.T) {
	grid := NewGrid([][]int{
		{1, -3, 0, -2, -5},
		{7, 9, 2, -3, 3},
		{-2, 0, 8, -4, 6},
	})
	grid.BubbleSort()
	assert.Equal(t, "[[-5 -4 -3 -3 -2] [-2 0 0 1 2] [3 6 7 8 9]]", fmt.Sprint(grid.Data))
}

func TestGrid4(t *testing.T) {
	grid := NewGrid([][]int{
		{-19, -13, -20, 7, -16, -20, -12, -4, -12, 5},
		{-6, -1, -10, 17, -12, -4, -19, -12, -3, 12},
		{-4, 13, -5, 18, 19, -2, -4, 11, 16, 17},
		{18, 12, 1, 5, -10, -10, 0, 1, 2, -8},
		{1, -12, -7, -17, 9, 16, -2, -6, -14, -11},
	})
	top, left, bottom, right, max := FindMaximumSumArea(grid)
	assert.Equal(t, "2 0 3 9 90", fmt.Sprintf("%d %d %d %d %d", top, left, bottom, right, max))
}

func TestGrid5(t *testing.T) {
	grid := NewGrid([][]int{
		{-12, -16, -15, 13, 9, 7, 0, 3, 14, -14},
		{5, 15, 6, 11, 13, 18, -13, 15, -20, 9},
		{-1, 19, -7, 16, 6, 1, -11, 16, -8, -11},
		{-13, 16, 8, 5, 10, -20, -4, 14, 10, -2},
		{-1, -8, 10, -5, -18, -12, -7, 6, 0, 11},
		{-10, -12, -7, 4, -20, -7, -3, -16, -12, -12},
		{2, -13, -13, -11, -2, 18, -4, 12, -20, 5},
		{4, 16, 6, -18, 0, -1, -12, 12, -18, -10},
		{-6, 10, -9, 6, 1, -9, -8, 0, 17, 19},
		{7, -15, 0, -5, -2, 4, -12, -19, 12, -1},
	})
	top, left, bottom, right, max := FindMaximumSumArea(grid)
	assert.Equal(t, "0 1 3 7 135", fmt.Sprintf("%d %d %d %d %d", top, left, bottom, right, max))
}

func TestGrid6(t *testing.T) {
	grid := NewGrid([][]int{
		{56, 160, -193, -104, 26, -13, 91, 11, -67, 20, 182, 170, -118, -181, -140},
		{-130, 193, -142, 115, -70, -199, 137, 62, 38, -15, 78, -87, -87, -160, -186},
		{-130, -125, 113, 139, 163, -138, 191, -95, -58, -120, -183, -160, 43, -42, -128},
		{-80, 88, -92, 162, 93, 172, 45, -155, 3, 104, 144, 132, 141, -72, -133},
		{163, -129, -38, -89, 12, 19, -89, -22, 195, 41, 60, -120, 163, -153, -74},
		{154, 42, 14, 180, 71, 95, 35, -132, 98, 72, 111, 35, -148, 33, -77},
		{-125, -44, -94, -105, -10, 29, -175, 189, 3, -125, -24, 169, 105, 84, 175},
		{124, 76, -153, 61, 118, -40, 20, -81, -83, 173, 184, -181, 5, -96, -102},
		{-174, 196, -46, 56, -127, 6, -38, -73, 2, 159, 148, -187, 44, 70, -88},
		{55, 185, -56, -103, 97, 58, -168, -14, -194, -15, -20, -49, 94, 190, -61},
		{-95, 118, -10, -70, -4, -37, 132, -111, -17, 20, -193, 176, -65, 178, 185},
		{-138, 62, 114, -157, -155, 176, -122, -156, -109, 105, 23, 166, -2, -93, -179},
		{193, 88, -129, 89, -195, 27, -85, -161, 91, 153, -69, 163, -1, 22, -200},
		{-122, 158, 154, -146, 85, 174, -169, -32, -65, 164, -50, 63, -100, -127, -76},
		{-143, -78, -124, 126, -46, 185, 101, -128, 49, -84, 118, 121, -6, 150, -98},
	})
	top, left, bottom, right, max := FindMaximumSumArea(grid)
	assert.Equal(t, "3 9 14 13 2103", fmt.Sprintf("%d %d %d %d %d", top, left, bottom, right, max))
}

func TestGrid7(t *testing.T) {
	grid := NewGrid([][]int{
		{1344, 419, -78, -1886, -1665, 2998, 623, -1106, -1075, -1123, 2978, 1450, 1787, 2558, -239, -1868, 936, -600, 1637, -1504, 2098, 694, -806, -575, 1617, 1681, 1008, 1261, 836, 1830},
		{-1368, 2868, 576, 1169, 114, 1097, 981, -823, -1838, 2121, 209, 864, 1810, -85, 2687, 2711, 2500, -1908, -854, -1835, -1003, -1830, 2699, -132, 2210, 524, -1360, -194, -1245, -93},
		{460, 826, -978, 1467, 1586, 555, 2968, -321, -1490, -1185, -1715, 2681, 26, -1613, 228, 1579, 875, -1224, 1939, 2817, -1259, 70, 831, -840, 1549, 1705, 296, -1956, -289, 1302},
		{-1370, -1406, -379, -756, 2429, -296, 1581, 1094, -164, 357, -1275, 1654, 2427, -1838, -393, 2549, -1265, -1023, 2341, 1834, 2546, 2748, 527, -1221, 516, 2456, -1765, -1290, 212, -1779},
		{536, 243, 1012, 1404, -1342, 1711, 1480, -25, -1182, 1089, 472, 1648, -1830, 2826, 2441, 220, -1104, 757, 2099, -233, -239, 1034, -352, 2367, 2547, 2936, -605, 1585, -881, -1777},
		{1485, -1409, 2251, 1229, 1384, 1339, 1442, -470, 2206, 2664, -168, -440, -1439, 2454, -969, -313, 593, 2755, -1025, -114, 644, -187, 2329, 1653, 1747, 1386, 1308, -1280, -1012, 1291},
		{1705, 139, 430, 1316, 1266, 2541, -487, 1457, 2923, 1240, -1246, 287, 1602, 293, 993, 191, 60, -210, -136, 2825, 1983, -60, 2091, -1615, 2311, -813, 2895, -1831, 633, 2799},
		{27, -459, 450, 328, -105, 1154, 2326, -1728, 2609, 2713, 1470, -432, 1613, -262, -1792, -1112, -1905, -202, 2255, 2906, -561, -392, 905, -1146, 1805, 1475, -1127, 1233, 617, 1025},
		{1672, -755, 2904, -1818, 785, -401, -1687, -1468, 2668, 2515, -1543, 175, 785, 2372, 1658, -1205, 1283, 2050, 2438, 2722, -398, -1696, 2009, -421, 1369, -443, 2844, 2392, -704, 2717},
		{-60, -151, 1361, 1579, -475, 2765, -1605, 276, -959, 926, -594, 1647, -1017, -1343, -848, 1077, -1975, 381, 518, -1681, 2182, 1811, 974, -1193, 498, 295, -916, -715, -568, 1580},
		{607, 1504, 1245, 713, 1170, 1518, 2731, -72, -1953, 1260, -1914, 1035, 105, 215, 2205, 370, 2767, 2632, -477, -1870, 34, -1422, 2800, 1335, 1907, -1137, -707, -396, 2325, -1645},
		{1427, -520, 2695, 2455, 1444, 1712, -1723, -1418, 830, 530, -207, 1042, -1131, -357, 494, 2639, 1025, 498, 2060, -1791, -1808, 1708, 1283, -1503, -1050, 330, 2491, -456, 1257, -1415},
		{1142, 1244, -460, 335, 340, 1397, 316, -1285, -249, -778, 811, 352, -1781, 466, 1239, 2066, -978, 1198, -1265, -1606, -1962, 2129, 1921, -1216, 1494, 1407, -16, 375, 1788, -506},
		{920, 1019, 388, 1636, 1634, 409, 2021, -555, 862, -1531, 1885, 2607, 2833, 2437, 2275, 2952, -1722, 2834, -1998, 2119, -154, 395, 1056, 2294, 1117, -586, -677, 1635, 129, 234},
		{820, 2713, 2128, 1320, 369, -1222, 1855, 2380, -902, 2298, 686, 2456, 1626, 2776, -467, 2547, -1758, 885, 1342, 2373, 156, 2894, -150, 2130, 1183, 276, -1281, -1903, 1675, 265},
		{2056, 637, 175, 529, -431, -1210, -983, -701, -470, 1689, 1478, 2003, 1534, 2237, 341, 2340, -111, -855, 1098, 386, 1942, 2550, 2966, 2994, -354, -1940, -388, -1255, 1611, -267},
		{2996, 824, 428, 1186, 1804, 904, -730, 1338, 633, -1835, 628, 362, 1399, 1625, 884, 2478, -1604, 2447, -795, 1089, 1120, -848, 562, 448, 2946, 2790, 2916, -1999, 220, 2097},
		{512, 1195, 2398, -1924, -1742, 2828, -1472, 2627, 1389, 479, -30, 83, -342, 2687, 2701, -228, 2656, -714, 1659, 1758, 895, 2637, 595, -1321, 1962, 2476, 1837, 1902, 2703, 1727},
		{2527, -1225, -178, 684, 119, -1092, 1343, 1985, -821, 1742, 2944, 804, -1777, -507, 195, 330, -316, -1795, 805, -92, 588, 345, 795, 2423, -317, 193, -1143, 972, 2904, -374},
		{1489, 2553, 2119, 2114, 630, -1067, -1974, 343, 2271, -1831, -379, 2508, 667, 2106, -1070, 1892, 1862, -1322, -1026, -472, 197, 307, 2140, 2857, 1494, 2163, -1954, -1381, 1488, 244},
		{895, 2138, 2801, 2501, 145, -1801, 2745, 1105, -1685, 2621, -1774, 1612, 1278, -1156, 1274, 829, -818, 214, -165, -96, 856, 1949, 2010, -1852, 633, 2497, 2989, 1025, 1371, 831},
		{1726, 936, 924, 2209, 2030, 867, 2780, 2824, -1706, -843, -726, -1037, -695, 137, -1049, 2484, 2358, -47, -1748, 817, 766, 2485, 833, 1974, 1109, -351, 1752, -1255, 28, -1040},
		{2852, 307, 2737, -1947, 332, 279, 27, -1448, 1039, 151, -1914, 2566, -916, 416, -510, 428, 1313, -1204, 1, -808, -624, -1544, -1592, -1512, -1792, 2976, 948, 549, 1168, 830},
		{-1930, 2996, -272, 2319, 958, 251, 2444, 672, 1062, 58, -1148, 389, 961, 2137, 1042, 1621, -741, 1746, -1016, 2049, -376, 1770, 2556, 303, 2361, 929, -305, 2031, -1457, 2813},
		{959, -1533, 820, 2255, -1751, 2082, 1175, 2595, 2282, 904, -1179, 2760, 730, 2426, 1459, 2326, -1616, 1301, -154, 2026, -744, 347, 1516, 1665, 185, 565, 1871, 1467, 1111, -705},
	})
	top, left, bottom, right, max := FindMaximumSumArea(grid)
	assert.Equal(t, "0 0 24 29 455921", fmt.Sprintf("%d %d %d %d %d", top, left, bottom, right, max))
}
